/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. sheng.jj */
/*@egen*/options {
  LOOKAHEAD = 10;
             
}


PARSER_BEGIN(Sheng)

public class Sheng/*@bgen(jjtree)*/implements ShengTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTShengState jjtree = new JJTShengState();

/*@egen*/

  public static void main(String args[]) throws ParseException {
    Sheng parser = new Sheng(System.in);
    SimpleNode root = parser.Start();
    root.dump("");
  }

}

PARSER_END(Sheng)
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{

	<ASSIGN: ":=">
|   <LINEEND: ";">
|	<IF: "if">
|	<THEN: "then">
|	<ELSE: "else">
|	<FI: "fi">
|	<WHILE: "while">
|	<DO: "do">
|	<OD: "od">
| 	<SKIP2: "skip">
}


TOKEN : /* LITERALS */
{
	< INTEGER: ("0" | ["1"-"9"] (["0"-"9"])*) >
|	< BLITERALS: ("true" | "false")>
}

TOKEN : 
{
   < ROPERATOR: ("=" | "<" | ">" | "<=" | ">=")>
|   < BNOT: "not">
|	<AND: "and">
| 	<OR: "or">
}


TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIERS: <LETTER> (<LETTER>|<DIGIT>|"'"|"_")* >
|
  < #LETTER: ["a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}

SimpleNode Start()       :
{/*@bgen(jjtree) START */
  ASTSTART jjtn000 = new ASTSTART(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) START */
        try {
/*@egen*/
	Commands()<EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Commands() :
{/*@bgen(jjtree) Commands */
  ASTCommands jjtn000 = new ASTCommands(JJTCOMMANDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Commands */
        try {
/*@egen*/
	OneCommand() (<LINEEND> OneCommand())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



void OneCommand ()      :
{}
{
	Assignment()
|/*@bgen(jjtree) If */
        {
          ASTIf jjtn001 = new ASTIf(JJTIF);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	
	(
		<IF> BExp() <THEN> Commands() <ELSE> Commands() <FI>
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/
	   
|/*@bgen(jjtree) While */
        {
          ASTWhile jjtn002 = new ASTWhile(JJTWHILE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/	
	(
		<WHILE> BExp() <DO> Commands() <OD>
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/       
|/*@bgen(jjtree) Skip */
        {
          ASTSkip jjtn003 = new ASTSkip(JJTSKIP);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/	
	(
	    <SKIP2>
	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
/*@egen*/      

}

void Assignment()         :
{/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assign */
        try {
/*@egen*/
	Var() <ASSIGN> AExp()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AExp()      :
{String s = "";}
{/*@bgen(jjtree) #Add(> 1) */
        {
          ASTAdd jjtn001 = new ASTAdd(JJTADD);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
		Term() (s = AExp2())?/*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                         jjtc001 = false;
                                       }
/*@egen*/  {jjtn001.setSign(s);}
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/        
}


String AExp2()       :
{String s = "";}
{/*@bgen(jjtree) #Add(> 1) */
        {
          ASTAdd jjtn001 = new ASTAdd(JJTADD);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
		"+" Term() (s= AExp2())?/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                           jjtc001 = false;
                                         }
/*@egen*/ {jjtn001.setSign(s);}
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/         
	{return "+";}
|/*@bgen(jjtree) #Add(> 1) */
        {
          ASTAdd jjtn002 = new ASTAdd(JJTADD);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
	(
		"-" Term() (s = AExp2())?/*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                                            jjtc002 = false;
                                          }
/*@egen*/ {jjtn002.setSign(s);}
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/         
	{return "-";}
}

void Term()      :
{}
{/*@bgen(jjtree) #Mult(> 1) */
        {
          ASTMult jjtn001 = new ASTMult(JJTMULT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
		Factor() (Term2())?
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/          
}

void Term2()      :
{}
{/*@bgen(jjtree) #Mult(> 1) */
        {
          ASTMult jjtn001 = new ASTMult(JJTMULT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
		"*" Factor() (Term2())?
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/         
}

void Factor()      :
{Token i;

}
{
	Var()
	
|/*@bgen(jjtree) Int */
        {
          ASTInt jjtn001 = new ASTInt(JJTINT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	
	(
		i = <INTEGER>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtc001 = false;
                              }
/*@egen*/ {jjtn001.setName(i.image);}

	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/    
	
|/*@bgen(jjtree) AddPar */
    {
      ASTAddPar jjtn002 = new ASTAddPar(JJTADDPAR);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/
    (
        "(" AExp() ")"
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/        

}


/** For Boolean expressions */

void BExp()      :
{}
{/*@bgen(jjtree) #Or(> 1) */
        {
          ASTOr jjtn001 = new ASTOr(JJTOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
		BTerm() (BExp2())?	
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/       
}

void BExp2()      :
{}
{/*@bgen(jjtree) #Or(> 1) */
        {
          ASTOr jjtn001 = new ASTOr(JJTOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
		<OR> BTerm() (BExp2())?
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/        
	
}

void BTerm()      :
{}
{/*@bgen(jjtree) #And(> 1) */
        {
          ASTAnd jjtn001 = new ASTAnd(JJTAND);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
		BFactor() (BTerm2())?
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/         
}

void BTerm2()      :
{}
{/*@bgen(jjtree) #And(> 1) */
        {
          ASTAnd jjtn001 = new ASTAnd(JJTAND);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
		<AND> BFactor() (BTerm2())?
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/         
}

void BFactor()         :
{/*@bgen(jjtree) BFactor */
 ASTBFactor jjtn000 = new ASTBFactor(JJTBFACTOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token bool;
 Token operator;
}
{/*@bgen(jjtree) BFactor */
        try {
/*@egen*//*@bgen(jjtree) BLiteral */
        {
          ASTBLiteral jjtn001 = new ASTBLiteral(JJTBLITERAL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
		bool = <BLITERALS>/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn001, true);
                                     jjtc001 = false;
                                   }
/*@egen*/ {jjtn001.setName(bool.image);}
	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/         

|/*@bgen(jjtree) BNot */
        {
          ASTBNot jjtn002 = new ASTBNot(JJTBNOT);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/	
	(
		<BNOT> "(" BExp() ")"	
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/      
	
|/*@bgen(jjtree) #Relation(> 1) */
        {
          ASTRelation jjtn003 = new ASTRelation(JJTRELATION);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/	
	(
		AExp() operator = <ROPERATOR> AExp()/*@bgen(jjtree)*/
                                                     {
                                                       jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 1);
                                                       jjtc003 = false;
                                                     }
/*@egen*/ {jjtn003.setOperator(operator.image);}
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            throw (RuntimeException)jjte003;
          }
          if (jjte003 instanceof ParseException) {
            throw (ParseException)jjte003;
          }
          throw (Error)jjte003;
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/             
	
|/*@bgen(jjtree) BoolPar */
    {
      ASTBoolPar jjtn004 = new ASTBoolPar(JJTBOOLPAR);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
    }
    try {
/*@egen*/
    (
        "(" BExp() ")"
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte004) {
      if (jjtc004) {
        jjtree.clearNodeScope(jjtn004);
        jjtc004 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte004 instanceof RuntimeException) {
        throw (RuntimeException)jjte004;
      }
      if (jjte004 instanceof ParseException) {
        throw (ParseException)jjte004;
      }
      throw (Error)jjte004;
    } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
      }
    }
/*@egen*/        /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Var()       :
{Token id;}
{/*@bgen(jjtree) Id */
        {
          ASTId jjtn001 = new ASTId(JJTID);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
		id = <IDENTIFIERS>/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn001, true);
                                     jjtc001 = false;
                                   }
/*@egen*/ {jjtn001.setName(id.image);}
	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/    
}